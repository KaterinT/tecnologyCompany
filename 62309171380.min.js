if (typeof ct_kt === "undefined") {
  ct_kt = {};
}
// ct_kt.mother_site = "https://kilatechapps.com";
ct_kt.prioritize_active_timers_non_product_pages = ["1"];
ct_kt.prioritize_active_timers_product_pages = ["1"];
ct_kt.schedule = {
  timer1: {
    timer: 1,
    design: "bindcard",
    mplace: false,
    fonts: "",
    pages: "all",
    specifics: "all",
    outofstock: "all",
    message:
      "\ud83c\udf89 AHORRA M\u00c1S DE S/90 HOY\ud83c\udf89  <span><br/> 70% DE DESCUENTO <br/>La oferta acaba en:</span> ",
    method: "fresh_constant",
    isLoop: true,
    period: "7",
    timestamp: "none",
  },
};
ct_kt.js_bindcard_setTime = (val) => {
  var days = Math.floor(val / (60 * 60 * 24)) + "";
  days = days.length == 1 ? "0" + days : days;
  var hrs = Math.floor((val % (60 * 60 * 24)) / (60 * 60)) + "";
  hrs = hrs.length == 1 ? "0" + hrs : hrs;
  var mins = Math.floor((val % (60 * 60)) / 60) + "";
  mins = mins.length == 1 ? "0" + mins : mins;
  var secs = (val % 60) + "";
  secs = secs.length == 1 ? "0" + secs : secs;
  var old_val = val + 1;
  var old_days = Math.floor(old_val / (60 * 60 * 24)) + "";
  old_days = old_days.length == 1 ? "0" + old_days : old_days;
  var old_hrs = Math.floor((old_val % (60 * 60 * 24)) / (60 * 60)) + "";
  old_hrs = old_hrs.length == 1 ? "0" + old_hrs : old_hrs;
  var old_mins = Math.floor((old_val % (60 * 60)) / 60) + "";
  old_mins = old_mins.length == 1 ? "0" + old_mins : old_mins;
  var old_secs = (old_val % 60) + "";
  old_secs = old_secs.length == 1 ? "0" + old_secs : old_secs;
  if (old_days != days) {
    document
      .querySelectorAll(
        ".kt-timer .kt-days .kt-back .kt-up, .kt-timer .kt-days .kt-back .kt-down"
      )
      .forEach((htmlComponent) => {
        htmlComponent.innerHTML = days;
      });
    document.querySelectorAll(".kt-timer .kt-days").forEach((htmlComponent) => {
      htmlComponent.classList.add("animate-kt");
    });
    old_days = true;
  }
  if (old_hrs != hrs) {
    document
      .querySelectorAll(
        ".kt-timer .kt-hrs .kt-back .kt-up, .kt-timer .kt-hrs .kt-back .kt-down"
      )
      .forEach((htmlComponent) => {
        htmlComponent.innerHTML = hrs;
      });
    document.querySelectorAll(".kt-timer .kt-hrs").forEach((htmlComponent) => {
      htmlComponent.classList.add("animate-kt");
    });
    old_hrs = true;
  }
  if (old_mins != mins) {
    document
      .querySelectorAll(
        ".kt-timer .kt-mins .kt-back .kt-up, .kt-timer .kt-mins .kt-back .kt-down"
      )
      .forEach((htmlComponent) => {
        htmlComponent.innerHTML = mins;
      });
    document.querySelectorAll(".kt-timer .kt-mins").forEach((htmlComponent) => {
      htmlComponent.classList.add("animate-kt");
    });
    old_mins = true;
  }
  if (old_secs != secs) {
    document
      .querySelectorAll(
        ".kt-timer .kt-secs .kt-back .kt-up, .kt-timer .kt-secs .kt-back .kt-down"
      )
      .forEach((htmlComponent) => {
        htmlComponent.innerHTML = secs;
      });
    document.querySelectorAll(".kt-timer .kt-secs").forEach((htmlComponent) => {
      htmlComponent.classList.add("animate-kt");
    });
    old_secs = true;
  }
  window.setTimeout(() => {
    if (old_days == true) {
      document
        .querySelectorAll(
          ".kt-timer .kt-days .kt-front .kt-up, .kt-timer .kt-days .kt-front .kt-down"
        )
        .forEach((htmlComponent) => {
          htmlComponent.innerHTML = days;
        });
    }
    if (old_hrs == true) {
      document
        .querySelectorAll(
          ".kt-timer .kt-hrs .kt-front .kt-up, .kt-timer .kt-hrs .kt-front .kt-down"
        )
        .forEach((htmlComponent) => {
          htmlComponent.innerHTML = hrs;
        });
    }
    if (old_mins == true) {
      document
        .querySelectorAll(
          ".kt-timer .kt-mins .kt-front .kt-up, .kt-timer .kt-mins .kt-front .kt-down"
        )
        .forEach((htmlComponent) => {
          htmlComponent.innerHTML = mins;
        });
    }
    if (old_secs == true) {
      document
        .querySelectorAll(
          ".kt-timer .kt-secs .kt-front .kt-up, .kt-timer .kt-secs .kt-front .kt-down"
        )
        .forEach((htmlComponent) => {
          htmlComponent.innerHTML = secs;
        });
    }
    document
      .querySelectorAll(
        ".kt-timer .kt-days, .kt-timer .kt-hrs, .kt-timer .kt-mins, .kt-timer .kt-secs"
      )
      .forEach((htmlComponent) => {
        htmlComponent.classList.remove("animate-kt");
      });
  }, 900);
};
ct_kt.js_bindcard_initTimer = (val = 0) => {
  var days = Math.floor(val / (60 * 60 * 24)) + "";
  days = days.length == 1 ? "0" + days : days;
  var hrs = Math.floor((val % (60 * 60 * 24)) / (60 * 60)) + "";
  hrs = hrs.length == 1 ? "0" + hrs : hrs;
  var mins = Math.floor((val % (60 * 60)) / 60) + "";
  mins = mins.length == 1 ? "0" + mins : mins;
  var secs = (val % 60) + "";
  secs = secs.length == 1 ? "0" + secs : secs;
  document
    .querySelectorAll(
      ".kt-timer .kt-days .kt-back .kt-up, .kt-timer .kt-days .kt-back .kt-down, .kt-timer .kt-days .kt-front .kt-up, .kt-timer .kt-days .kt-front .kt-down"
    )
    .forEach((htmlComponent) => {
      htmlComponent.innerHTML = days;
    });
  document
    .querySelectorAll(
      ".kt-timer .kt-hrs .kt-back .kt-up, .kt-timer .kt-hrs .kt-back .kt-down, .kt-timer .kt-hrs .kt-front .kt-up, .kt-timer .kt-hrs .kt-front .kt-down"
    )
    .forEach((htmlComponent) => {
      htmlComponent.innerHTML = hrs;
    });
  document
    .querySelectorAll(
      ".kt-timer .kt-mins .kt-back .kt-up, .kt-timer .kt-mins .kt-back .kt-down, .kt-timer .kt-mins .kt-front .kt-up, .kt-timer .kt-mins .kt-front .kt-down"
    )
    .forEach((htmlComponent) => {
      htmlComponent.innerHTML = mins;
    });
  document
    .querySelectorAll(
      ".kt-timer .kt-secs .kt-back .kt-up, .kt-timer .kt-secs .kt-back .kt-down, .kt-timer .kt-secs .kt-front .kt-up, .kt-timer .kt-secs .kt-front .kt-down"
    )
    .forEach((htmlComponent) => {
      htmlComponent.innerHTML = secs;
    });
};
ct_kt.html_bindcard = `<div class="kt-wrapper"><div class="kt-timer"><div class="kt-head"><div class="kt-message animateText-kt">INPUT_TAGLINE</div></div><div class="kt-timer-component"><div class="kt-section"><div class="kt-card kt-days"><div class="kt-front"><div class="kt-up"></div></div><div class="kt-back"><div class="kt-up"></div></div><div class="kt-holder">00</div></div><div class="kt-unit">DÃ­a</div></div><div class="kt-sep kt-days">:</div><div class="kt-section"><div class="kt-card kt-hrs"><div class="kt-front"><div class="kt-up"></div></div><div class="kt-back"><div class="kt-up"></div></div><div class="kt-holder">00</div></div><div class="kt-unit">Horas</div></div><div class="kt-sep kt-hrs">:</div><div class="kt-section"><div class="kt-card kt-mins"><div class="kt-front"><div class="kt-up"></div></div><div class="kt-back"><div class="kt-up"></div></div><div class="kt-holder">00</div></div><div class="kt-unit">Minutos</div></div><div class="kt-sep kt-mins">:</div><div class="kt-section"><div class="kt-card kt-secs"><div class="kt-front"><div class="kt-up"></div></div><div class="kt-back"><div class="kt-up"></div></div><div class="kt-holder">00</div></div><div class="kt-unit">Segundo</div></div></div><div style="text-align: right;display: block !important;width: 100% !important; max-width: 100% !important; height: 100% !important; max-height: 100% !important;"><a href=""target="_blank"style="display: inline-block !important; height: 100% !important; max-height: 100% !important; width: 100% !important; max-width: 100% !important;"></a></div></div></div>`;
ct_kt.style1 = "";
ct_kt.style2 = "";
ct_kt.style3 = "";
ct_kt.style4 = "";
ct_kt.style5 = "";
ct_kt.style1 = ` #product-form-installment #countdownultimate-KT-auto,form.installment #countdownultimate-KT-auto{display:none}#countdownultimate-KT.hide-kt,#countdownultimate-KT-auto.hide-kt{display:none}#countdownultimate-KT,#countdownultimate-KT-auto{width:100%}.kt-wrapper{text-align:center}.kt-wrapper div:empty{display:block}@media(min-width:768px){.kt-wrapper{text-align:right}}.kt-timer{display:inline-block;margin:10px 0;line-height:1;-webkit-animation:kt-entrance-scale-in-center .5s cubic-bezier(0.250,0.460,0.450,0.940) both;animation:kt-entrance-scale-in-center .5s cubic-bezier(0.250,0.460,0.450,0.940) both}.kt-timer-component{display:inline-flex;flex-flow:wrap;justify-content:center}.kt-timer .kt-head{display:block}.kt-timer .kt-message{font-family:Arial,Helvetica,sans-serif;font-size:12pt;font-weight:700;font-style:normal;text-align:center;color:rgba(201,201,0,1);padding-bottom:10px}.kt-timer .kt-message span{font-size:150%;font-weight:800}.animateText-kt{-webkit-animation:kt-attention-wobble 3.5s cubic-bezier(0.4,0,1,1) infinite both;animation:kt-attention-wobble 3.5s cubic-bezier(0.4,0,1,1) infinite both}.kt-timer .kt-section{display:inline-block}.kt-timer .kt-sep{display:inline-block;font-family:inherit;font-size:20pt;font-weight:700;margin:0 3px;color:rgba(0,0,0,1)}.kt-timer .kt-card{position:relative;display:inline-block;margin-left:2px;margin-right:2px;margin-bottom:6%;perspective:400px;-webkit-perspective:400px;font-family:inherit;font-size:20pt;font-weight:700;font-style:normal}.kt-timer .kt-unit{text-align:center;margin-top:3px;display:block;font-family:inherit;font-size:8pt;font-weight:400;font-style:normal;color:rgba(0,0,0,1)}.kt-timer .kt-card .kt-holder{position:relative;visibility:hidden}.kt-timer .kt-card .kt-holder,.kt-timer .kt-card .kt-up{padding:0 4px}.kt-timer .kt-card .kt-holder,.kt-timer .kt-card .kt-up,.kt-timer .kt-sep{line-height:1.2}.kt-timer .kt-card .kt-up{position:absolute;height:100%;overflow:hidden}.kt-timer .kt-card .kt-down{position:relative;top:-100%}.kt-timer .kt-card .kt-front,.kt-timer .kt-card .kt-back{position:absolute;height:100%}.kt-timer .kt-card .kt-front .kt-up,.kt-timer .kt-card .kt-back .kt-up{background-color:rgba(12,12,12,1);color:rgba(255,255,255,1)}.kt-timer .kt-card .kt-back .kt-up{}.kt-timer .kt-card .kt-front .kt-up,.kt-timer .kt-card .kt-back .kt-up{border-radius:10px}.kt-timer .kt-card .kt-front .kt-up{z-index:1}.kt-timer .kt-card .kt-up{transform-origin:center;-webkit-transform-origin:center}.animate-kt .kt-front .kt-up{-webkit-animation:kt-an-std-puff-out-center .5s cubic-bezier(0.4,0,1,1) both;animation:kt-an-std-puff-out-center .5s cubic-bezier(0.4,0,1,1) both}@-webkit-keyframes kt-entrance-scale-in-center{0%{-webkit-transform:scale(0);transform:scale(0);opacity:1}100%{-webkit-transform:scale(1);transform:scale(1);opacity:1}}@keyframes kt-entrance-scale-in-center{0%{-webkit-transform:scale(0);transform:scale(0);opacity:1}100%{-webkit-transform:scale(1);transform:scale(1);opacity:1}}@-webkit-keyframes kt-attention-wobble{0%,20%{-webkit-transform:translateX(0);transform:translateX(0);-webkit-transform-origin:50% 50%;transform-origin:50% 50%}3%{-webkit-transform:translateX(-30px) rotate(-6deg);transform:translateX(-30px) rotate(-6deg)}6%{-webkit-transform:translateX(15px) rotate(6deg);transform:translateX(15px) rotate(6deg)}9%{-webkit-transform:translateX(-15px) rotate(-3.6deg);transform:translateX(-15px) rotate(-3.6deg)}12%{-webkit-transform:translateX(9px) rotate(2.4deg);transform:translateX(9px) rotate(2.4deg)}15%{-webkit-transform:translateX(-6px) rotate(-1.2deg);transform:translateX(-6px) rotate(-1.2deg)}}@keyframes kt-attention-wobble{0%,20%{-webkit-transform:translateX(0);transform:translateX(0);-webkit-transform-origin:50% 50%;transform-origin:50% 50%}3%{-webkit-transform:translateX(-30px) rotate(-6deg);transform:translateX(-30px) rotate(-6deg)}6%{-webkit-transform:translateX(15px) rotate(6deg);transform:translateX(15px) rotate(6deg)}9%{-webkit-transform:translateX(-15px) rotate(-3.6deg);transform:translateX(-15px) rotate(-3.6deg)}12%{-webkit-transform:translateX(9px) rotate(2.4deg);transform:translateX(9px) rotate(2.4deg)}15%{-webkit-transform:translateX(-6px) rotate(-1.2deg);transform:translateX(-6px) rotate(-1.2deg)}}@-webkit-keyframes kt-an-std-puff-out-center{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-filter:blur(0);filter:blur(0);opacity:1}100%{-webkit-transform:scale(2);transform:scale(2);-webkit-filter:blur(4px);filter:blur(4px);opacity:0}}@keyframes kt-an-std-puff-out-center{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-filter:blur(0);filter:blur(0);opacity:1}100%{-webkit-transform:scale(2);transform:scale(2);-webkit-filter:blur(4px);filter:blur(4px);opacity:0}}`;
ct_kt.styles = {
  1: ct_kt.style1,
  2: ct_kt.style2,
  3: ct_kt.style3,
  4: ct_kt.style4,
  5: ct_kt.style5,
};
importFont = document.createElement("link");
importFont.id = "ct-kt-fonts";
importFont.rel = "stylesheet";
importFont.href = "https://fonts.googleapis.com/css?family=";
ct_kt.setCookie = (cname, cvalue) => {
  localStorage.setItem(cname, cvalue);
};
ct_kt.getCookie = (cname) => {
  return localStorage.getItem(cname);
};
ct_kt.timer_data_selector = (timer) => {
  switch (timer) {
    case "1":
      return ct_kt.schedule.timer1;
    case "2":
      return ct_kt.schedule.timer2;
    case "3":
      return ct_kt.schedule.timer3;
    case "4":
      return ct_kt.schedule.timer4;
    case "5":
      return ct_kt.schedule.timer5;
    default:
      return null;
  }
};
ct_kt.timer_get_remaining = (data) => {
  switch (data.method) {
    case "constant":
      return ct_kt.calc_remaining_method_const(data);
    case "fresh_constant":
      return ct_kt.calc_remaining_method_fresh_const(data);
    case "specific":
      return ct_kt.calc_remaining_method_specific(data);
    case "daily":
      return ct_kt.calc_remaining_method_daily(data);
    case "weekly":
      return ct_kt.calc_remaining_method_weekly(data);
    default:
      return null;
  }
};
ct_kt.calc_remaining_method_const_all = async () => {
  pk = 52194;
  timer = "";
  if (timer != "") {
    var req = await fetch(
      ct_kt.mother_site +
        "/countdown/pk_remaining_seconds?pk=" +
        pk +
        "&timer=" +
        timer
    );
    if (req.status == 200) {
      response = await req.json();
      for (var i of Object.keys(response)) {
        switch (i) {
          case "1":
            ct_kt.schedule.timer1 = {
              ...ct_kt.schedule.timer1,
              remaining: response[i][0],
              noloops: response[i][1],
            };
            break;
          case "2":
            ct_kt.schedule.timer2 = {
              ...ct_kt.schedule.timer2,
              remaining: response[i][0],
              noloops: response[i][1],
            };
            break;
          case "3":
            ct_kt.schedule.timer3 = {
              ...ct_kt.schedule.timer3,
              remaining: response[i][0],
              noloops: response[i][1],
            };
            break;
          case "4":
            ct_kt.schedule.timer4 = {
              ...ct_kt.schedule.timer4,
              remaining: response[i][0],
              noloops: response[i][1],
            };
            break;
          case "5":
            ct_kt.schedule.timer5 = {
              ...ct_kt.schedule.timer5,
              remaining: response[i][0],
              noloops: response[i][1],
            };
            break;
        }
      }
    }
  }
};
ct_kt.calc_remaining_method_const = (data) => {
  if (data.noloops > 0 && data.isLoop == false) {
    return -1;
  }
  return data.remaining;
};
ct_kt.calc_remaining_method_fresh_const = (data) => {
  var cookievalue = ct_kt.getCookie("ct_kt_fr");
  if (cookievalue == null) {
    var now = +new Date();
    ct_kt.setCookie("ct_kt_fr", now + "," + data.timestamp);
    return data.period * 60;
  } else {
    cookievalue = cookievalue.split(",");
    var thenTimestamp = cookievalue[0];
    var isNewCookie = cookievalue[1];
    if (data.timestamp == "none" || data.timestamp == isNewCookie) {
      var thenDatetime = new Date(parseInt(thenTimestamp));
      var nowDatetime = new Date();
      var difference_in_seconds = Math.floor(
        (nowDatetime - thenDatetime) / 1000
      );
      if (!data.isLoop && difference_in_seconds / (data.period * 60) > 1) {
        return -1;
      }
      return data.period * 60 - (difference_in_seconds % (data.period * 60));
    }
    if (data.timestamp != isNewCookie) {
      var now = +new Date();
      ct_kt.setCookie("ct_kt_fr", now + "," + data.timestamp);
      return data.period * 60;
    }
  }
  return -1;
};
ct_kt.calc_remaining_method_specific = (data) => {
  var nowDateTime = new Date();
  var startDateTime = new Date(data.start);
  var endDateTime = new Date(data.end);
  if (endDateTime - startDateTime <= 0) {
    console.error("Invalid timer scheduling detected - timer");
    return -1;
  }
  if (data.respecttimezone) {
    if (startDateTime < nowDateTime && nowDateTime < endDateTime) {
      return Math.floor((endDateTime - nowDateTime) / 1000);
    } else {
      return -1;
    }
  } else {
    currentTimezone = nowDateTime.getTimezoneOffset();
    deltaTimezone = currentTimezone - parseInt(data.timezone);
    configured_startDateTime = new Date(
      +startDateTime + deltaTimezone * 60 * 1000
    );
    configured_endDateTime = new Date(+endDateTime + deltaTimezone * 60 * 1000);
    if (
      configured_startDateTime < nowDateTime &&
      nowDateTime < configured_endDateTime
    ) {
      return Math.floor((configured_endDateTime - nowDateTime) / 1000);
    } else {
      return -1;
    }
  }
};
ct_kt.calc_remaining_method_daily = (data) => {
  var nowDateTime = new Date();
  var starthoursmins = data.start.split(":");
  var startDateTime = new Date();
  startDateTime.setHours(
    parseInt(starthoursmins[0]),
    parseInt(starthoursmins[1]),
    0
  );
  var endhoursmins = data.end.split(":");
  var endDateTime = new Date();
  endDateTime.setHours(parseInt(endhoursmins[0]), parseInt(endhoursmins[1]), 0);
  if (endDateTime - startDateTime <= 0) {
    console.error("Invalid timer scheduling detected - timer");
    return -1;
  }
  if (startDateTime < nowDateTime && nowDateTime < endDateTime) {
    return Math.floor((endDateTime - nowDateTime) / 1000);
  } else {
    return -1;
  }
};
ct_kt.calc_remaining_method_weekly = (data) => {
  var nowDateTime = new Date();
  var nowDay = nowDateTime.getDay();
  var day_order = [];
  var dayn = nowDay + 1;
  for (var i = nowDay; i < nowDay + 14; i++) {
    if (dayn < 7) {
      day_order.push(dayn);
    } else {
      dayn = 0;
      day_order.push(dayn);
    }
    dayn++;
  }
  var indexofstart = day_order.indexOf(parseInt(data.start_day));
  var indexofend = day_order.indexOf(parseInt(data.end_day));
  if (indexofstart < indexofend) {
    return -1;
  }
  const daymapper = {
    "-6": 1,
    "-5": 2,
    "-4": 3,
    "-3": 4,
    "-2": 5,
    "-1": 6,
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 0,
    8: 1,
    9: 2,
    10: 3,
    11: 4,
    12: 5,
  };
  var dayfinder_back = [];
  var dayfinder_front = [];
  for (var i = nowDay - 6; i <= nowDay; i++) {
    dayfinder_back.push(daymapper[i]);
  }
  for (var i = nowDay; i <= nowDay + 6; i++) {
    dayfinder_front.push(daymapper[i]);
  }
  var daydiff =
    (dayfinder_back.indexOf(nowDay) -
      dayfinder_back.indexOf(parseInt(data.start_day))) *
    24 *
    60 *
    60 *
    1000;
  var startDateTime = new Date();
  var starthoursmins = data.start.split(":");
  startDateTime.setHours(
    parseInt(starthoursmins[0]),
    parseInt(starthoursmins[1]),
    0
  );
  startDateTime = +startDateTime - daydiff;
  daydiff =
    (dayfinder_front.indexOf(parseInt(data.end_day)) -
      dayfinder_front.indexOf(nowDay)) *
    24 *
    60 *
    60 *
    1000;
  var endhoursmins = data.end.split(":");
  var endDateTime = new Date();
  endDateTime.setHours(parseInt(endhoursmins[0]), parseInt(endhoursmins[1]), 0);
  endDateTime = +endDateTime + daydiff;
  if (endDateTime - startDateTime <= 0) {
    console.error("Invalid timer scheduling detected - timer");
    return -1;
  }
  if (startDateTime < nowDateTime && nowDateTime < endDateTime) {
    return Math.floor((endDateTime - nowDateTime) / 1000);
  } else {
    return -1;
  }
};
ct_kt.identify_page = async () => {
  if (typeof kilatech_page_CT == "undefined") {
    kilatech_page_CT = "";
    kilatech_available_CT = "";
    kilatech_sale_CT = "";
    kilatech_tags_CT = [];
    var urlparts = window.location.pathname.split("/");
    if (
      urlparts.length == 2 &&
      urlparts[0] == urlparts[1] &&
      urlparts[1] == ""
    ) {
      kilatech_page_CT = "home";
    } else {
      urlparts.forEach((part) => {
        if (part == "cart") {
          kilatech_page_CT = "cart";
        }
      });
    }
    if (kilatech_page_CT == "") {
      var handler = urlparts.pop();
      var req = await fetch("/products/" + handler + ".js");
      if (req.status == 200) {
        kilatech_page_CT = "product";
        var respnse = await req.json();
        kilatech_available_CT = respnse.available;
        for (var i of respnse.tags) {
          kilatech_tags_CT.push(i.toLowerCase());
        }
        for (var i in respnse.variants) {
          if (respnse.variants[i].compare_at_price != null) {
            if (
              respnse.variants[i].price < respnse.variants[i].compare_at_price
            ) {
              kilatech_sale_CT = true;
              break;
            }
          }
        }
      } else {
        kilatech_page_CT = "other";
      }
    }
  }
  return kilatech_page_CT;
};
ct_kt.identry_timer_for_page = () => {
  if (kilatech_page_CT != "product") {
    for (var i of ct_kt.prioritize_active_timers_non_product_pages) {
      var data = ct_kt.timer_data_selector(i);
      var remaining = ct_kt.timer_get_remaining(data);
      if (remaining > 0) {
        data = { ...data, remaining: remaining };
        return data;
      }
    }
    return null;
  }
  if (kilatech_page_CT == "product") {
    for (var i of ct_kt.prioritize_active_timers_product_pages) {
      var data = ct_kt.timer_data_selector(i);
      var tag = false;
      if (data.specifics == "tag") {
        for (var i of data.tags) {
          if (kilatech_tags_CT.includes(i)) {
            tag = true;
          }
        }
        if (!tag) {
          continue;
        }
      }
      if (data.specifics == "sale") {
        if (kilatech_sale_CT == false) {
          continue;
        }
      }
      if (data.specifics == "nosale") {
        if (kilatech_sale_CT == true) {
          continue;
        }
      }
      if (data.outofstock == "out") {
        if (kilatech_available_CT == true) {
          continue;
        }
      } else if (data.outofstock == "aonly") {
        if (kilatech_available_CT == false) {
          continue;
        }
      }
      var remaining = ct_kt.timer_get_remaining(data);
      if (remaining > 0) {
        data = { ...data, remaining: remaining };
        return data;
      }
    }
    return null;
  }
};
ct_kt.initTimer = null;
ct_kt.setTime = null;
ct_kt.htmlComponent = null;
ct_kt.style = null;
ct_kt.counter = null;
KT_TOTAL = null;
ct_kt.start_timer = (data) => {
  KT_TOTAL = data.remaining;
  if (KT_TOTAL > 0) {
    switch (data.design) {
      case "flip":
        ct_kt.initTimer = ct_kt.js_flip_initTimer;
        ct_kt.setTime = ct_kt.js_flip_setTime;
        ct_kt.htmlComponent = ct_kt.html_flip;
        break;
      case "bindflip":
        ct_kt.initTimer = ct_kt.js_bindflip_initTimer;
        ct_kt.setTime = ct_kt.js_bindflip_setTime;
        ct_kt.htmlComponent = ct_kt.html_bindflip;
        break;
      case "card":
        ct_kt.initTimer = ct_kt.js_card_initTimer;
        ct_kt.setTime = ct_kt.js_card_setTime;
        ct_kt.htmlComponent = ct_kt.html_card;
        break;
      case "bindcard":
        ct_kt.initTimer = ct_kt.js_bindcard_initTimer;
        ct_kt.setTime = ct_kt.js_bindcard_setTime;
        ct_kt.htmlComponent = ct_kt.html_bindcard;
        break;
      case "circlebanner":
        ct_kt.initTimer = ct_kt.js_circlebanner_initTimer;
        ct_kt.setTime = ct_kt.js_circlebanner_setTime;
        ct_kt.htmlComponent = ct_kt.html_circlebanner;
        break;
      case "circles":
        ct_kt.initTimer = ct_kt.js_circles_initTimer;
        ct_kt.setTime = ct_kt.js_circles_setTime;
        ct_kt.htmlComponent = ct_kt.html_circles;
        break;
      case "plain":
        ct_kt.initTimer = ct_kt.js_plain_initTimer;
        ct_kt.setTime = ct_kt.js_plain_setTime;
        ct_kt.htmlComponent = ct_kt.html_plain;
        break;
      default:
        break;
    }
    ct_kt.style = ct_kt.styles[data.timer];
    if (!data.mplace) {
      var placeholder_component = document.createElement("div");
      placeholder_component.id = "countdownultimate-KT-auto";
      placeholder_component.class = "hide-kt";
      document
        .querySelectorAll("form[action*='/cart/add']")
        .forEach((htmlComponent) => {
          htmlComponent.appendChild(placeholder_component.cloneNode(true));
        });
      ct_kt.htmlComponent = ct_kt.htmlComponent.replace(
        "INPUT_TAGLINE",
        data.message
      );
      document
        .querySelectorAll("#countdownultimate-KT-auto")
        .forEach((htmlComponent) => {
          htmlComponent.innerHTML = ct_kt.htmlComponent;
        });
    } else {
      ct_kt.htmlComponent = ct_kt.htmlComponent.replace(
        "INPUT_TAGLINE",
        data.message
      );
      document
        .querySelectorAll("#countdownultimate-KT")
        .forEach((htmlComponent) => {
          htmlComponent.innerHTML = ct_kt.htmlComponent;
        });
    }
    if (
      document.querySelectorAll(
        "#countdownultimate-KT, #countdownultimate-KT-auto"
      ).length > 0
    ) {
      var style_component = document.createElement("style");
      style_component.id = "ctkt";
      style_component.innerHTML = ct_kt.style;
      document.head.append(style_component);
      if (data.fonts != "") {
        importFont.href = importFont.href + data.fonts;
        document.head.appendChild(importFont);
      }
    } else {
      return;
    }
    window.setTimeout(() => {
      ct_kt.initTimer(KT_TOTAL);
    }, 5);
    try {
      ct_kt_before_start();
    } catch {}
    document
      .querySelectorAll("#countdownultimate-KT, #countdownultimate-KT-auto")
      .forEach((htmlComponent) => {
        htmlComponent.classList.remove("hide-kt");
      });
    ct_kt.counter = window.setInterval(() => {
      KT_TOTAL--;
      ct_kt.setTime(KT_TOTAL);
      if (KT_TOTAL < 0) {
        window.clearInterval(ct_kt.counter);
        document
          .querySelectorAll("#countdownultimate-KT, #countdownultimate-KT-auto")
          .forEach((htmlComponent) => {
            htmlComponent.classList.add("hide-kt");
          });
        try {
          ct_kt_expired();
        } catch {}
      }
    }, 1000);
  }
};
ct_kt.main = async () => {
  var const_remainings = ct_kt.calc_remaining_method_const_all();
  var detecting_page = ct_kt.identify_page();
  await detecting_page;
  await const_remainings;
  var timer_data = ct_kt.identry_timer_for_page();
  if (timer_data != null) {
    if (typeof ct_kt.started == "undefined" || ct_kt.started == false) {
      ct_kt.started = true;
      ct_kt.start_timer(timer_data);
    }
  }
};
ct_kt.main();
